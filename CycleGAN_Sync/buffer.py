"""
@author: Payam Dibaeinia
"""

import torch
import numpy as np


class buffer(object):
    """ A data structure for maintaining previously generated images

    Out implementation is very similar to the original implementation of image pool in CycleGAN
    https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix/blob/master/util/image_pool.py
    """

    def __init__(self, size = 50):
        """
        size: buffer size; if size = 0 buffer is not maintained
        """
        self.size_ = size
        self.buffer_ = []

    def getImages(self, currImages, prob = 0.5):
        """
        currImages: the latest images generated by generator
        prob: probability of drwaing an image from buffer
        """
        currImages = currImages.cpu()
        if self.size_ == 0: # buffer is not used and
            return currImages

        ret = []
        for image in currImages: # len(currImages) = batch_size training
            if len(self.buffer_) < self.size_:
                self.buffer_.append(image)
                ret.append(image)
            else:
                p = np.random.uniform()
                if p < prob:
                    idx = np.random.randint(0, high = len(self.buffer_))
                    ret.append(self.buffer_[idx].clone())
                    self.buffer_[idx] = image
                else:
                    ret.append(image)
        ret = torch.stack(ret, dim = 0)
        return ret
